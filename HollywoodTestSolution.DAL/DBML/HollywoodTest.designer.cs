#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HollywoodTestSolution.DAL.DBML
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HollywoodTest")]
	public partial class HollywoodTestDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventDetail(EventDetail instance);
    partial void UpdateEventDetail(EventDetail instance);
    partial void DeleteEventDetail(EventDetail instance);
    partial void InsertEventDetailStatus(EventDetailStatus instance);
    partial void UpdateEventDetailStatus(EventDetailStatus instance);
    partial void DeleteEventDetailStatus(EventDetailStatus instance);
    partial void InsertTournament(Tournament instance);
    partial void UpdateTournament(Tournament instance);
    partial void DeleteTournament(Tournament instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUserRoleMapping(UserRoleMapping instance);
    partial void UpdateUserRoleMapping(UserRoleMapping instance);
    partial void DeleteUserRoleMapping(UserRoleMapping instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public HollywoodTestDataContext() : 
				base(global::HollywoodTestSolution.DataAccessLayer.Properties.Settings.Default.HollywoodTestConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HollywoodTestDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HollywoodTestDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HollywoodTestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HollywoodTestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventDetail> EventDetails
		{
			get
			{
				return this.GetTable<EventDetail>();
			}
		}
		
		public System.Data.Linq.Table<EventDetailStatus> EventDetailStatus
		{
			get
			{
				return this.GetTable<EventDetailStatus>();
			}
		}
		
		public System.Data.Linq.Table<Tournament> Tournaments
		{
			get
			{
				return this.GetTable<Tournament>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<UserRoleMapping> UserRoleMappings
		{
			get
			{
				return this.GetTable<UserRoleMapping>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventID;
		
		private System.Nullable<long> _FK_TournamentID;
		
		private string _EventName;
		
		private System.Nullable<short> _EventNumber;
		
		private System.Nullable<System.DateTime> _EventDateTime;
		
		private System.Nullable<System.DateTime> _EventEndDateTime;
		
		private System.Nullable<bool> _AutoClose;
		
		private EntitySet<EventDetail> _EventDetails;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnFK_TournamentIDChanging(System.Nullable<long> value);
    partial void OnFK_TournamentIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnEventNumberChanging(System.Nullable<short> value);
    partial void OnEventNumberChanged();
    partial void OnEventDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEventDateTimeChanged();
    partial void OnEventEndDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEventEndDateTimeChanged();
    partial void OnAutoCloseChanging(System.Nullable<bool> value);
    partial void OnAutoCloseChanged();
    #endregion
		
		public Event()
		{
			this._EventDetails = new EntitySet<EventDetail>(new Action<EventDetail>(this.attach_EventDetails), new Action<EventDetail>(this.detach_EventDetails));
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_TournamentID", DbType="BigInt")]
		public System.Nullable<long> FK_TournamentID
		{
			get
			{
				return this._FK_TournamentID;
			}
			set
			{
				if ((this._FK_TournamentID != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_TournamentIDChanging(value);
					this.SendPropertyChanging();
					this._FK_TournamentID = value;
					this.SendPropertyChanged("FK_TournamentID");
					this.OnFK_TournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="VarChar(100)")]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventNumber", DbType="SmallInt")]
		public System.Nullable<short> EventNumber
		{
			get
			{
				return this._EventNumber;
			}
			set
			{
				if ((this._EventNumber != value))
				{
					this.OnEventNumberChanging(value);
					this.SendPropertyChanging();
					this._EventNumber = value;
					this.SendPropertyChanged("EventNumber");
					this.OnEventNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EventDateTime
		{
			get
			{
				return this._EventDateTime;
			}
			set
			{
				if ((this._EventDateTime != value))
				{
					this.OnEventDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EventDateTime = value;
					this.SendPropertyChanged("EventDateTime");
					this.OnEventDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventEndDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EventEndDateTime
		{
			get
			{
				return this._EventEndDateTime;
			}
			set
			{
				if ((this._EventEndDateTime != value))
				{
					this.OnEventEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EventEndDateTime = value;
					this.SendPropertyChanged("EventEndDateTime");
					this.OnEventEndDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoClose", DbType="Bit")]
		public System.Nullable<bool> AutoClose
		{
			get
			{
				return this._AutoClose;
			}
			set
			{
				if ((this._AutoClose != value))
				{
					this.OnAutoCloseChanging(value);
					this.SendPropertyChanging();
					this._AutoClose = value;
					this.SendPropertyChanged("AutoClose");
					this.OnAutoCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventDetail", Storage="_EventDetails", ThisKey="EventID", OtherKey="FK_EventID")]
		public EntitySet<EventDetail> EventDetails
		{
			get
			{
				return this._EventDetails;
			}
			set
			{
				this._EventDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Event", Storage="_Tournament", ThisKey="FK_TournamentID", OtherKey="TournamentID", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._FK_TournamentID = value.TournamentID;
					}
					else
					{
						this._FK_TournamentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventDetail")]
	public partial class EventDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventDetailID;
		
		private System.Nullable<long> _FK_EventID;
		
		private System.Nullable<short> _FK_EventDetailStatusID;
		
		private string _EventDetailName;
		
		private System.Nullable<short> _EventDetailNumber;
		
		private System.Nullable<decimal> _EventDetailOdd;
		
		private System.Nullable<short> _FinishingPosition;
		
		private System.Nullable<bool> _FirstTimer;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<EventDetailStatus> _EventDetailStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventDetailIDChanging(long value);
    partial void OnEventDetailIDChanged();
    partial void OnFK_EventIDChanging(System.Nullable<long> value);
    partial void OnFK_EventIDChanged();
    partial void OnFK_EventDetailStatusIDChanging(System.Nullable<short> value);
    partial void OnFK_EventDetailStatusIDChanged();
    partial void OnEventDetailNameChanging(string value);
    partial void OnEventDetailNameChanged();
    partial void OnEventDetailNumberChanging(System.Nullable<short> value);
    partial void OnEventDetailNumberChanged();
    partial void OnEventDetailOddChanging(System.Nullable<decimal> value);
    partial void OnEventDetailOddChanged();
    partial void OnFinishingPositionChanging(System.Nullable<short> value);
    partial void OnFinishingPositionChanged();
    partial void OnFirstTimerChanging(System.Nullable<bool> value);
    partial void OnFirstTimerChanged();
    #endregion
		
		public EventDetail()
		{
			this._Event = default(EntityRef<Event>);
			this._EventDetailStatus = default(EntityRef<EventDetailStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EventDetailID
		{
			get
			{
				return this._EventDetailID;
			}
			set
			{
				if ((this._EventDetailID != value))
				{
					this.OnEventDetailIDChanging(value);
					this.SendPropertyChanging();
					this._EventDetailID = value;
					this.SendPropertyChanged("EventDetailID");
					this.OnEventDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_EventID", DbType="BigInt")]
		public System.Nullable<long> FK_EventID
		{
			get
			{
				return this._FK_EventID;
			}
			set
			{
				if ((this._FK_EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_EventIDChanging(value);
					this.SendPropertyChanging();
					this._FK_EventID = value;
					this.SendPropertyChanged("FK_EventID");
					this.OnFK_EventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_EventDetailStatusID", DbType="SmallInt")]
		public System.Nullable<short> FK_EventDetailStatusID
		{
			get
			{
				return this._FK_EventDetailStatusID;
			}
			set
			{
				if ((this._FK_EventDetailStatusID != value))
				{
					if (this._EventDetailStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_EventDetailStatusIDChanging(value);
					this.SendPropertyChanging();
					this._FK_EventDetailStatusID = value;
					this.SendPropertyChanged("FK_EventDetailStatusID");
					this.OnFK_EventDetailStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailName", DbType="VarChar(50)")]
		public string EventDetailName
		{
			get
			{
				return this._EventDetailName;
			}
			set
			{
				if ((this._EventDetailName != value))
				{
					this.OnEventDetailNameChanging(value);
					this.SendPropertyChanging();
					this._EventDetailName = value;
					this.SendPropertyChanged("EventDetailName");
					this.OnEventDetailNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailNumber", DbType="SmallInt")]
		public System.Nullable<short> EventDetailNumber
		{
			get
			{
				return this._EventDetailNumber;
			}
			set
			{
				if ((this._EventDetailNumber != value))
				{
					this.OnEventDetailNumberChanging(value);
					this.SendPropertyChanging();
					this._EventDetailNumber = value;
					this.SendPropertyChanged("EventDetailNumber");
					this.OnEventDetailNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailOdd", DbType="Decimal(18,7)")]
		public System.Nullable<decimal> EventDetailOdd
		{
			get
			{
				return this._EventDetailOdd;
			}
			set
			{
				if ((this._EventDetailOdd != value))
				{
					this.OnEventDetailOddChanging(value);
					this.SendPropertyChanging();
					this._EventDetailOdd = value;
					this.SendPropertyChanged("EventDetailOdd");
					this.OnEventDetailOddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishingPosition", DbType="SmallInt")]
		public System.Nullable<short> FinishingPosition
		{
			get
			{
				return this._FinishingPosition;
			}
			set
			{
				if ((this._FinishingPosition != value))
				{
					this.OnFinishingPositionChanging(value);
					this.SendPropertyChanging();
					this._FinishingPosition = value;
					this.SendPropertyChanged("FinishingPosition");
					this.OnFinishingPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstTimer", DbType="Bit")]
		public System.Nullable<bool> FirstTimer
		{
			get
			{
				return this._FirstTimer;
			}
			set
			{
				if ((this._FirstTimer != value))
				{
					this.OnFirstTimerChanging(value);
					this.SendPropertyChanging();
					this._FirstTimer = value;
					this.SendPropertyChanged("FirstTimer");
					this.OnFirstTimerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventDetail", Storage="_Event", ThisKey="FK_EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventDetails.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventDetails.Add(this);
						this._FK_EventID = value.EventID;
					}
					else
					{
						this._FK_EventID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventDetailStatus_EventDetail", Storage="_EventDetailStatus", ThisKey="FK_EventDetailStatusID", OtherKey="EventDetailStatusID", IsForeignKey=true)]
		public EventDetailStatus EventDetailStatus
		{
			get
			{
				return this._EventDetailStatus.Entity;
			}
			set
			{
				EventDetailStatus previousValue = this._EventDetailStatus.Entity;
				if (((previousValue != value) 
							|| (this._EventDetailStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventDetailStatus.Entity = null;
						previousValue.EventDetails.Remove(this);
					}
					this._EventDetailStatus.Entity = value;
					if ((value != null))
					{
						value.EventDetails.Add(this);
						this._FK_EventDetailStatusID = value.EventDetailStatusID;
					}
					else
					{
						this._FK_EventDetailStatusID = default(Nullable<short>);
					}
					this.SendPropertyChanged("EventDetailStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventDetailStatus")]
	public partial class EventDetailStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _EventDetailStatusID;
		
		private string _EventDetailStatusName;
		
		private EntitySet<EventDetail> _EventDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventDetailStatusIDChanging(short value);
    partial void OnEventDetailStatusIDChanged();
    partial void OnEventDetailStatusNameChanging(string value);
    partial void OnEventDetailStatusNameChanged();
    #endregion
		
		public EventDetailStatus()
		{
			this._EventDetails = new EntitySet<EventDetail>(new Action<EventDetail>(this.attach_EventDetails), new Action<EventDetail>(this.detach_EventDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailStatusID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short EventDetailStatusID
		{
			get
			{
				return this._EventDetailStatusID;
			}
			set
			{
				if ((this._EventDetailStatusID != value))
				{
					this.OnEventDetailStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EventDetailStatusID = value;
					this.SendPropertyChanged("EventDetailStatusID");
					this.OnEventDetailStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailStatusName", DbType="VarChar(50)")]
		public string EventDetailStatusName
		{
			get
			{
				return this._EventDetailStatusName;
			}
			set
			{
				if ((this._EventDetailStatusName != value))
				{
					this.OnEventDetailStatusNameChanging(value);
					this.SendPropertyChanging();
					this._EventDetailStatusName = value;
					this.SendPropertyChanged("EventDetailStatusName");
					this.OnEventDetailStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventDetailStatus_EventDetail", Storage="_EventDetails", ThisKey="EventDetailStatusID", OtherKey="FK_EventDetailStatusID")]
		public EntitySet<EventDetail> EventDetails
		{
			get
			{
				return this._EventDetails;
			}
			set
			{
				this._EventDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.EventDetailStatus = this;
		}
		
		private void detach_EventDetails(EventDetail entity)
		{
			this.SendPropertyChanging();
			entity.EventDetailStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tournament")]
	public partial class Tournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TournamentID;
		
		private string _TournamentName;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTournamentIDChanging(long value);
    partial void OnTournamentIDChanged();
    partial void OnTournamentNameChanging(string value);
    partial void OnTournamentNameChanged();
    #endregion
		
		public Tournament()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TournamentID
		{
			get
			{
				return this._TournamentID;
			}
			set
			{
				if ((this._TournamentID != value))
				{
					this.OnTournamentIDChanging(value);
					this.SendPropertyChanging();
					this._TournamentID = value;
					this.SendPropertyChanged("TournamentID");
					this.OnTournamentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TournamentName", DbType="VarChar(200)")]
		public string TournamentName
		{
			get
			{
				return this._TournamentName;
			}
			set
			{
				if ((this._TournamentName != value))
				{
					this.OnTournamentNameChanging(value);
					this.SendPropertyChanging();
					this._TournamentName = value;
					this.SendPropertyChanged("TournamentName");
					this.OnTournamentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tournament_Event", Storage="_Events", ThisKey="TournamentID", OtherKey="FK_TournamentID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _RoleName;
		
		private EntitySet<UserRoleMapping> _UserRoleMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoleMappings = new EntitySet<UserRoleMapping>(new Action<UserRoleMapping>(this.attach_UserRoleMappings), new Action<UserRoleMapping>(this.detach_UserRoleMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRoleMapping", Storage="_UserRoleMappings", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<UserRoleMapping> UserRoleMappings
		{
			get
			{
				return this._UserRoleMappings;
			}
			set
			{
				this._UserRoleMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoleMappings(UserRoleMapping entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoleMappings(UserRoleMapping entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleMapping")]
	public partial class UserRoleMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UserRoleMapping()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRoleMapping", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoleMappings.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoleMappings.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRoleMapping", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoleMappings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoleMappings.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<UserRoleMapping> _UserRoleMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._UserRoleMappings = new EntitySet<UserRoleMapping>(new Action<UserRoleMapping>(this.attach_UserRoleMappings), new Action<UserRoleMapping>(this.detach_UserRoleMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRoleMapping", Storage="_UserRoleMappings", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserRoleMapping> UserRoleMappings
		{
			get
			{
				return this._UserRoleMappings;
			}
			set
			{
				this._UserRoleMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoleMappings(UserRoleMapping entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoleMappings(UserRoleMapping entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
